{"map":"{\"version\":3,\"sources\":[\"C:\\\\Leo\\\\Apps\\\\OrdersMgr\\\\orders-ui\\\\src\\\\App.js\",\"C:\\\\Leo\\\\Apps\\\\OrdersMgr\\\\orders-ui\\\\src\\\\serviceWorker.js\",\"C:\\\\Leo\\\\Apps\\\\OrdersMgr\\\\orders-ui\\\\src\\\\components\\\\login.jsx\",\"C:\\\\Leo\\\\Apps\\\\OrdersMgr\\\\orders-ui\\\\src\\\\components\\\\navbar.jsx\",\"C:\\\\Leo\\\\Apps\\\\OrdersMgr\\\\orders-ui\\\\src\\\\components\\\\container.jsx\",\"C:\\\\Leo\\\\Apps\\\\OrdersMgr\\\\orders-ui\\\\src\\\\index.js\"],\"names\":[\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"Login\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"config\",\"instance\",\"tenant\",\"clientId\",\"postLogoutRedirectUri\",\"origin\",\"cacheLocation\",\"handleLogin\",\"AuthenticationContext\",\"login\",\"react_default\",\"a\",\"createElement\",\"Fragment\",\"href\",\"className\",\"onClick\",\"NavBar\",\"props\",\"Container\",\"navbar\",\"ReactDOM\",\"render\",\"container\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"mQAGkBA,EAAAA,UCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qFCoBSC,cAvBb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAbFI,MAAQ,CACNC,OAAQ,CACNC,SAAU,qCACVC,OAAQ,yDACRC,SACE,yEACFC,sBAAuBjB,OAAOC,SAASiB,OACvCC,cAAe,iBAKLd,EAIde,YAAc,WACM,IAAIC,EAAAA,EAAsBhB,EAAKO,MAAMC,QAC3CS,SANAjB,wEAUZ,OACEkB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,IAAA,CAAGE,KAAK,IAAIC,UAAU,eAAeC,QAAQ,eAA7C,UAGAN,EAAAC,EAAAC,cAAA,IAAA,CAAGE,KAAK,IAAIC,UAAU,gBAAtB,iBA5BY9B,EAAAA,WCQLgC,EAPA,SAAAC,GACb,OACER,EAAAC,EAAAC,cAAA,MAAA,CAAKG,UAAU,gCACbL,EAAAC,EAAAC,cAACH,EAAD,QCOSU,6MAVbpB,MAAQ,2EAEN,OACEW,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACQ,EAAD,cALgBnC,EAAAA,WCMxBoC,EAAAA,EAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAAeC,SAASC,eAAe,SJqHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from \\\"react\\\";\\nimport \\\"./App.css\\\";\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n          <p>\\n            Edit <code>src/App.js</code> and save to reload.\\n          </p>\\n          <a\\n            className=\\\"App-link\\\"\\n            href=\\\"https://reactjs.org\\\"\\n            target=\\\"_blank\\\"\\n            rel=\\\"noopener noreferrer\\\"\\n          >\\n            Learn React\\n          </a>\\n        </header>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type').indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React, { Component } from \\\"react\\\";\\r\\nimport AuthenticationContext from \\\"azure-adal\\\";\\r\\nclass Login extends Component {\\r\\n  state = {\\r\\n    config: {\\r\\n      instance: \\\"https://login.microsoftonline.com/\\\",\\r\\n      tenant: \\\"[Enter your tenant here, e.g. contoso.onmicrosoft.com]\\\",\\r\\n      clientId:\\r\\n        \\\"[Enter your client_id here, e.g. g075edef-0efa-453b-997b-de1337c29185]\\\",\\r\\n      postLogoutRedirectUri: window.location.origin,\\r\\n      cacheLocation: \\\"localStorage\\\" // enable this for IE, as sessionStorage does not work for localhost.\\r\\n    }\\r\\n    // authContext\\r\\n  };\\r\\n\\r\\n  constructor() {\\r\\n    super();\\r\\n  }\\r\\n\\r\\n  handleLogin = () => {\\r\\n    var authContext = new AuthenticationContext(this.state.config);\\r\\n    authContext.login();\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <React.Fragment>\\r\\n        <a href=\\\"#\\\" className=\\\"navbar-brand\\\" onClick=\\\"handleLogin\\\">\\r\\n          Logout\\r\\n        </a>\\r\\n        <a href=\\\"#\\\" className=\\\"navbar-brand\\\">\\r\\n          Login\\r\\n        </a>\\r\\n      </React.Fragment>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default Login;\\r\\n\",\"import React, { Component } from \\\"react\\\";\\r\\nimport Login from \\\"./login\\\";\\r\\n\\r\\nconst NavBar = props => {\\r\\n  return (\\r\\n    <nav className=\\\"navbar navbar-light bg-light\\\">\\r\\n      <Login />\\r\\n    </nav>\\r\\n  );\\r\\n};\\r\\nexport default NavBar;\\r\\n\",\"import React, { Component } from \\\"react\\\";\\r\\nimport NavBar from \\\"./navbar\\\";\\r\\nclass Container extends Component {\\r\\n  state = {};\\r\\n  render() {\\r\\n    return (\\r\\n      <React.Fragment>\\r\\n        <NavBar />\\r\\n      </React.Fragment>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default Container;\\r\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport \\\"./index.css\\\";\\nimport App from \\\"./App\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\nimport \\\"bootstrap/dist/css/bootstrap.css\\\";\\nimport Container from \\\"./components/container\\\";\\n\\nReactDOM.render(<Container />, document.getElementById(\\\"root\\\"));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{10:function(e,n,t){e.exports=t(27)},15:function(e,n,t){},17:function(e,n,t){},27:function(e,n,t){\"use strict\";t.r(n);var a=t(0),o=t.n(a),r=t(8),c=t.n(r),i=(t(15),t(1)),l=t(2),u=t(4),s=t(3),m=t(5);t(17),a.Component,Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));t(19);var g=t(9),h=t.n(g),f=function(e){function n(){var e;return Object(i.a)(this,n),(e=Object(u.a)(this,Object(s.a)(n).call(this))).state={config:{instance:\"https://login.microsoftonline.com/\",tenant:\"[Enter your tenant here, e.g. contoso.onmicrosoft.com]\",clientId:\"[Enter your client_id here, e.g. g075edef-0efa-453b-997b-de1337c29185]\",postLogoutRedirectUri:window.location.origin,cacheLocation:\"localStorage\"}},e.handleLogin=function(){new h.a(e.state.config).login()},e}return Object(m.a)(n,e),Object(l.a)(n,[{key:\"render\",value:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(\"a\",{href:\"#\",className:\"navbar-brand\",onClick:\"handleLogin\"},\"Logout\"),o.a.createElement(\"a\",{href:\"#\",className:\"navbar-brand\"},\"Login\"))}}]),n}(a.Component),b=function(e){return o.a.createElement(\"nav\",{className:\"navbar navbar-light bg-light\"},o.a.createElement(f,null))},d=function(e){function n(){var e,t;Object(i.a)(this,n);for(var a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return(t=Object(u.a)(this,(e=Object(s.a)(n)).call.apply(e,[this].concat(o)))).state={},t}return Object(m.a)(n,e),Object(l.a)(n,[{key:\"render\",value:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(b,null))}}]),n}(a.Component);c.a.render(o.a.createElement(d,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[10,2,1]]]);","extractedComments":[]}