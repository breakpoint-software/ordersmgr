{"version":3,"sources":["adal/config.js","reducers/orderReducer.js","reducers/index.js","actions/types.js","store.js","components/navbar.jsx","components/orders.jsx","actions/orderAction.js","components/orderDetails.jsx","routes/index.jsx","App.js","serviceWorker.js","indexApp.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","adalConfig","authContext","react_adal__WEBPACK_IMPORTED_MODULE_0__","clientId","tenant","endpoints","api","cacheLocation","AuthenticationContext","withAdalLogin","initialState","items","selectedOrder","combineReducers","orderReducer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","store","createStore","rootReducer","applyMiddleware","apply","NavBar","handleLogout","logOut","user","getCachedUser","react_default","a","createElement","Navbar","inverse","fluid","collapseOnSelect","Header","width","Brand","href","profile","name","Nav","NavItem","onClick","this","Component","Orders","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleRowClick","order","history","push","orderId","id","dateFormatter","cell","Intl","DateTimeFormat","year","month","day","format","Date","options","page","sizePerPageList","text","value","orders","sizePerPage","pageStartIndex","paginationSize","prePage","nextPage","firstPage","lastPage","paginationShowsTotal","renderShowsTotal","paginationPosition","onRowClick","defaultSortName","defaultSortOrder","fetchOrders","className","lib","data","pagination","isKey","dataField","hidden","dataAlign","headerAlign","dataSort","filter","delay","dataFormat","withRouter","connect","dispatch","token","getCachedToken","config","fetch","headers","Authorization","Content-Type","then","res","json","err","console","error","OrderDetails","handleIncrementItem","row","rowIndex","updateProductOrder","productId","quantity","price","unitaryPrice","handleDecrementItem","cellButton","enumObject","fa","color","fetchFullOrder","location","_options","defineProperty","description","date","total","details","striped","hover","version","fullOrder","log","JSON","stringify","Accept","method","body","Routes","BrowserRouter","Switch","Route","path","exact","render","components_orders","orderDetails","React","App","es","Fragment","navbar","routes","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","r","_adal_config__WEBPACK_IMPORTED_MODULE_1__","runWithAdal","require"],"mappings":"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","file":"static/js/main.5a67e4ea.chunk.js","sourcesContent":["import { AuthenticationContext, adalFetch, withAdalLogin } from \"react-adal\";\r\n\r\nexport const adalConfig = {\r\n  // tenant: \"e4a69758-a370-4712-98ae-826314c8c686\",\r\n  clientId: \"c386fc0f-93f3-40ba-b15b-a02b79896714\",\r\n  tenant: \"common\",\r\n  endpoints: {\r\n    api: \"https://ordersgrapi.azurewebsites.net/v1\"\r\n    // api: \"https://localhost:44360/v1\"\r\n  },\r\n\r\n  cacheLocation: \"localStorage\"\r\n};\r\n\r\nexport const authContext = new AuthenticationContext(adalConfig);\r\n\r\nexport const adalApiFetch = (fetch, url, options) =>\r\n  adalFetch(authContext, adalConfig.endpoints.api, fetch, url, options);\r\n\r\nexport const withAdalLoginApi = withAdalLogin(\r\n  authContext,\r\n  adalConfig.endpoints.api\r\n);\r\n","import {\r\n  FETCH_ORDERS,\r\n  FETCH_ORDER_WITH_DETAILS,\r\n  UPDATE_PRODUCT_ORDER\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  selectedOrder: {}\r\n};\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_ORDERS:\r\n      return {\r\n        ...state,\r\n        items: action.payload\r\n      };\r\n    case FETCH_ORDER_WITH_DETAILS:\r\n      return {\r\n        ...state,\r\n        selectedOrder: action.payload\r\n      };\r\n\r\n      break;\r\n    case UPDATE_PRODUCT_ORDER:\r\n      return {\r\n        ...state,\r\n        selectedOrder: action.payload\r\n      };\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport orderReducer from \"./orderReducer\";\r\nexport default combineReducers({\r\n  orderReducer: orderReducer\r\n});\r\n","export const FETCH_ORDERS = \"FETCH_ORDERS\";\r\nexport const FETCH_ORDER_WITH_DETAILS = \"FETCH_ORDER_DETAILS\";\r\nexport const UPDATE_PRODUCT_ORDER = \"UPDATE_PRODUCT_ORDER\";\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  applyMiddleware(...middleware)\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport { authContext } from \"../adal/config\";\r\nimport { Navbar, Nav, NavItem, NavDropdown, MenuItem } from \"react-bootstrap\";\r\n\r\nclass NavBar extends Component {\r\n  handleLogout = () => {\r\n    authContext.logOut();\r\n  };\r\n\r\n  render() {\r\n    var user = authContext.getCachedUser();\r\n    return (\r\n      <Navbar inverse fluid collapseOnSelect>\r\n        <Navbar.Header width=\"100%\">\r\n          <Navbar.Brand>\r\n            <a href=\"/\">Orders of {user.profile.name}</a>\r\n          </Navbar.Brand>\r\n        </Navbar.Header>\r\n        <Nav>\r\n          <NavItem onClick={this.handleLogout}>Log out</NavItem>\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchOrders } from \"../actions/orderAction\";\r\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Orders extends Component {\r\n  componentWillMount() {\r\n    this.props.fetchOrders();\r\n  }\r\n\r\n  handleRowClick = order => {\r\n    this.props.history.push(\"orderDetails\", { orderId: order.id });\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.options = {\r\n      page: 1,\r\n      sizePerPageList: [\r\n        {\r\n          text: \"5\",\r\n          value: 5\r\n        },\r\n        {\r\n          text: \"10\",\r\n          value: 10\r\n        },\r\n        {\r\n          text: \"All\",\r\n          value: this.props.orders.length\r\n        }\r\n      ],\r\n      sizePerPage: 10,\r\n      pageStartIndex: 1,\r\n      paginationSize: 3,\r\n      prePage: \"Prev\",\r\n      nextPage: \"Next\",\r\n      firstPage: \"First\",\r\n      lastPage: \"Last\",\r\n      paginationShowsTotal: this.renderShowsTotal,\r\n      paginationPosition: \"both\",\r\n      onRowClick: this.handleRowClick,\r\n      defaultSortName: \"date\",\r\n      defaultSortOrder: \"desc\"\r\n    };\r\n  }\r\n\r\n  dateFormatter = cell => {\r\n    if (!cell) {\r\n      return \"\";\r\n    }\r\n\r\n    return new Intl.DateTimeFormat(\"en-GB\", {\r\n      year: \"numeric\",\r\n      month: \"numeric\",\r\n      day: \"2-digit\"\r\n    }).format(new Date(cell));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <BootstrapTable\r\n          data={this.props.orders}\r\n          options={this.options}\r\n          pagination={true}\r\n        >\r\n          <TableHeaderColumn isKey={true} dataField=\"id\" hidden>\r\n            id\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn\r\n            dataField=\"description\"\r\n            dataAlign=\"left\"\r\n            headerAlign=\"left\"\r\n            dataSort\r\n            filter={{ type: \"TextFilter\", delay: 1000 }}\r\n          >\r\n            Description\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn\r\n            dataField=\"customer\"\r\n            dataAlign=\"left\"\r\n            headerAlign=\"left\"\r\n            dataSort\r\n            filter={{ type: \"TextFilter\", delay: 1000 }}\r\n          >\r\n            Customer\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn\r\n            dataField=\"date\"\r\n            dataAlign=\"center\"\r\n            headerAlign=\"center\"\r\n            dataSort\r\n            filter={{ type: \"TextFilter\", delay: 1000 }}\r\n            dataFormat={this.dateFormatter}\r\n          >\r\n            Date\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn\r\n            dataField=\"quantity\"\r\n            dataAlign=\"right\"\r\n            headerAlign=\"right\"\r\n            dataSort\r\n            filter={{ type: \"TextFilter\", delay: 1000 }}\r\n          >\r\n            Quantity\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn\r\n            dataField=\"total\"\r\n            dataAlign=\"right\"\r\n            headerAlign=\"right\"\r\n            dataSort\r\n            filter={{ type: \"TextFilter\", delay: 1000 }}\r\n          >\r\n            Total\r\n          </TableHeaderColumn>\r\n        </BootstrapTable>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nOrders.propTypes = {\r\n  fetchOrders: PropTypes.func.isRequired,\r\n  orders: PropTypes.array.isRequired,\r\n  history: PropTypes.object.isRequired\r\n};\r\nconst MapOrdersToState = state => ({\r\n  orders: state.orderReducer.items\r\n});\r\nexport default withRouter(\r\n  connect(\r\n    MapOrdersToState,\r\n    { fetchOrders }\r\n  )(Orders)\r\n);\r\n","import { FETCH_ORDERS, FETCH_ORDER_WITH_DETAILS } from \"./types\";\r\nimport { adalApiFetch, adalConfig, authContext } from \"../adal/config\";\r\nexport const fetchOrders = () => dispatch => {\r\n  var token = authContext.getCachedToken(authContext.config.clientId);\r\n  fetch(adalConfig.endpoints.api + \"/orders/get\", {\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(res => res.json(), err => console.error(err))\r\n    .then(orders =>\r\n      dispatch({\r\n        type: FETCH_ORDERS,\r\n        payload: orders\r\n      })\r\n    );\r\n};\r\n\r\nexport const fetchFullOrder = orderId => dispatch => {\r\n  var token = authContext.getCachedToken(authContext.config.clientId);\r\n\r\n  fetch(adalConfig.endpoints.api + \"/orders/getFullOrder/\" + orderId, {\r\n    headers: {\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(res => res.json())\r\n    .then(fullOrder =>\r\n      dispatch({\r\n        type: FETCH_ORDER_WITH_DETAILS,\r\n        payload: fullOrder\r\n      })\r\n    );\r\n};\r\n\r\nexport const updateProductOrder = data => dispatch => {\r\n  var token = authContext.getCachedToken(authContext.config.clientId);\r\n\r\n  console.log(JSON.stringify(data));\r\n  fetch(adalConfig.endpoints.api + \"/orders/UpdateProductOrder\", {\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      Authorization: \"Bearer \" + token,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    method: \"PUT\",\r\n    body: JSON.stringify(data)\r\n  })\r\n    .then(res => res.json())\r\n    .then(fullOrder =>\r\n      dispatch({\r\n        type: FETCH_ORDER_WITH_DETAILS,\r\n        payload: fullOrder\r\n      })\r\n    );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchFullOrder, updateProductOrder } from \"../actions/orderAction\";\r\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\r\nimport { FaPlus, FaMinus } from \"react-icons/fa\";\r\n\r\nclass OrderDetails extends Component {\r\n  componentWillMount() {\r\n    this.props.fetchFullOrder(this.props.location.state.orderId);\r\n  }\r\n  handleIncrementItem = (cell, row, rowIndex) => {\r\n    this.props.updateProductOrder({\r\n      productId: row.productId,\r\n      orderId: row.orderId,\r\n      quantity: row.quantity + 1,\r\n      price: row.unitaryPrice\r\n    });\r\n  };\r\n\r\n  handleDecrementItem = (cell, row, rowIndex) => {\r\n    this.props.updateProductOrder({\r\n      productId: row.productId,\r\n      orderId: row.orderId,\r\n      quantity: row.quantity > 0 ? row.quantity - 1 : 0,\r\n      price: row.unitaryPrice\r\n    });\r\n  };\r\n\r\n  cellButton = (cell, row, enumObject, rowIndex) => {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-default btn-sm\"\r\n          onClick={() => this.handleIncrementItem(cell, row, rowIndex)}\r\n        >\r\n          <FaPlus />\r\n        </button>{\" \"}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-default btn-sm\"\r\n          onClick={() => this.handleDecrementItem(cell, row, rowIndex)}\r\n        >\r\n          <FaMinus color=\"red\" />\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const options = {\r\n      page: 1,\r\n      sizePerPage: [\r\n        {\r\n          text: \"10\",\r\n          value: \"10\"\r\n        }\r\n      ],\r\n      sizePerPage: 10,\r\n      pageStartIndex: 1,\r\n      paginationSize: 3,\r\n      prePage: \"Prev\",\r\n      nextPage: \"Next\",\r\n      firstPage: \"First\",\r\n      lastPage: \"Last\",\r\n      paginationShowsTotal: this.renderShowsTotal,\r\n      paginationPosition: \"both\"\r\n    };\r\n\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <br />\r\n        <h4>Order</h4>\r\n        <hr />\r\n        <div className=\"panel panel-default \">\r\n          <div className=\"panel-body\">\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <b>Description:&nbsp;</b>\r\n                  {this.props.selectedOrder.description}\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <b>Date:&nbsp;</b>\r\n                  {this.props.selectedOrder.date}\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <b> Quantity:</b>\r\n                  &nbsp;\r\n                  {this.props.selectedOrder.quantity}\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <b>Total:&nbsp;</b>\r\n                  {this.props.selectedOrder.total}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <h4>Detail</h4>\r\n        <hr />\r\n        <div className=\"panel panel-default \">\r\n          <div className=\"panel-body\">\r\n            <div className=\"container-fluid \">\r\n              <BootstrapTable\r\n                data={this.props.selectedOrder.details}\r\n                striped\r\n                hover\r\n                options={options}\r\n                pagination={true}\r\n                version=\"4\"\r\n              >\r\n                <TableHeaderColumn isKey={true} hidden dataField=\"id\">\r\n                  id\r\n                </TableHeaderColumn>\r\n                <TableHeaderColumn\r\n                  dataField=\"product\"\r\n                  dataAlign=\"left\"\r\n                  headerAlign=\"left\"\r\n                >\r\n                  Product\r\n                </TableHeaderColumn>\r\n                <TableHeaderColumn\r\n                  dataField=\"unitaryPrice\"\r\n                  dataAlign=\"right\"\r\n                  headerAlign=\"right\"\r\n                >\r\n                  Unitary Price\r\n                </TableHeaderColumn>\r\n                <TableHeaderColumn\r\n                  dataField=\"quantity\"\r\n                  dataAlign=\"right\"\r\n                  headerAlign=\"right\"\r\n                >\r\n                  Quantity\r\n                </TableHeaderColumn>\r\n                <TableHeaderColumn\r\n                  dataField=\"subtotal\"\r\n                  dataAlign=\"right\"\r\n                  headerAlign=\"right\"\r\n                >\r\n                  Subtotal\r\n                </TableHeaderColumn>\r\n                <TableHeaderColumn\r\n                  dataAlign=\"center\"\r\n                  headerAlign=\"center\"\r\n                  dataFormat={this.cellButton}\r\n                  width=\"120\"\r\n                >\r\n                  &nbsp;\r\n                </TableHeaderColumn>\r\n              </BootstrapTable>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nOrderDetails.propTypes = {\r\n  fetchFullOrder: PropTypes.func.isRequired,\r\n  updateProductOrder: PropTypes.func.isRequired,\r\n  selectedOrder: PropTypes.object.isRequired\r\n};\r\nconst MapOrdersToState = state => ({\r\n  selectedOrder: state.orderReducer.selectedOrder\r\n});\r\n\r\nexport default connect(\r\n  MapOrdersToState,\r\n  { fetchFullOrder, updateProductOrder }\r\n)(OrderDetails);\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Orders from \"../components/orders\";\r\nimport OrderDetails from \"../components/orderDetails\";\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/\" exact render={props => <Orders {...props} />} />\r\n          <Route\r\n            path=\"/orderDetails\"\r\n            exact\r\n            render={props => <OrderDetails {...props} />}\r\n          />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport AuthenticationContext from \"azure-adal\";\nimport NavBar from \"./components/navbar\";\nimport Routes from \"./routes\";\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <Provider store={store}>\n        <React.Fragment>\n          <div className=\"container-fluid\">\n            <NavBar />\n            <br />\n            <Routes />\n          </div>\n        </React.Fragment>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\nimport \"./stylesheet.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { runWithAdal } from \"react-adal\";\nimport { authContext } from \"./adal/config\";\n\nconst DO_NOT_LOGIN = false;\n\nrunWithAdal(\n  authContext,\n  () => {\n    // eslint-disable-next-line\n    require(\"./indexApp.js\");\n  },\n  DO_NOT_LOGIN\n);\n"],"sourceRoot":""}